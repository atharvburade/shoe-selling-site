{"ast":null,"code":"import { HttpEventType } from '@angular/common/http';\nimport { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/loading.service\";\nvar pendingRequests = 0;\nclass LoadingInterceptor {\n  constructor(loadingService) {\n    this.loadingService = loadingService;\n  }\n  intercept(request, next) {\n    this.loadingService.showLoading();\n    pendingRequests = pendingRequests + 1;\n    return next.handle(request).pipe(tap({\n      next: event => {\n        if (event.type === HttpEventType.Response) {\n          this.handleHideLoading();\n        }\n      },\n      error: _ => {\n        this.handleHideLoading();\n      }\n    }));\n  }\n  handleHideLoading() {\n    pendingRequests = pendingRequests - 1;\n    if (pendingRequests === 0) this.loadingService.hideLoading();\n  }\n}\nLoadingInterceptor.ɵfac = function LoadingInterceptor_Factory(t) {\n  return new (t || LoadingInterceptor)(i0.ɵɵinject(i1.LoadingService));\n};\nLoadingInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoadingInterceptor,\n  factory: LoadingInterceptor.ɵfac\n});\nexport { LoadingInterceptor };","map":{"version":3,"names":["HttpEventType","tap","pendingRequests","LoadingInterceptor","constructor","loadingService","intercept","request","next","showLoading","handle","pipe","event","type","Response","handleHideLoading","error","_","hideLoading","i0","ɵɵinject","i1","LoadingService","factory","ɵfac"],"sources":["D:\\projects\\shoe-selling-site\\frontend\\src\\app\\shared\\interceptors\\loading.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpEventType\n} from '@angular/common/http';\nimport { Observable, tap } from 'rxjs';\nimport { LoadingService } from 'src/app/services/loading.service';\nvar pendingRequests = 0;\n@Injectable()\nexport class LoadingInterceptor implements HttpInterceptor {\n\n  constructor(private loadingService: LoadingService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    this.loadingService.showLoading();\n    pendingRequests = pendingRequests + 1;\n\n    return next.handle(request).pipe(\n      tap({\n        next:(event) => {\n          if(event.type === HttpEventType.Response){\n            this.handleHideLoading();\n          }\n        },\n        error: (_) => {\n          this.handleHideLoading();\n        }\n      })\n    );\n  }\n\n  handleHideLoading(){\n    pendingRequests = pendingRequests - 1;\n    if(pendingRequests === 0)\n    this.loadingService.hideLoading();\n  }\n}\n"],"mappings":"AACA,SAKEA,aAAa,QACR,sBAAsB;AAC7B,SAAqBC,GAAG,QAAQ,MAAM;;;AAEtC,IAAIC,eAAe,GAAG,CAAC;AACvB,MACaC,kBAAkB;EAE7BC,YAAoBC,cAA8B;IAA9B,KAAAA,cAAc,GAAdA,cAAc;EAAmB;EAErDC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD,IAAI,CAACH,cAAc,CAACI,WAAW,EAAE;IACjCP,eAAe,GAAGA,eAAe,GAAG,CAAC;IAErC,OAAOM,IAAI,CAACE,MAAM,CAACH,OAAO,CAAC,CAACI,IAAI,CAC9BV,GAAG,CAAC;MACFO,IAAI,EAAEI,KAAK,IAAI;QACb,IAAGA,KAAK,CAACC,IAAI,KAAKb,aAAa,CAACc,QAAQ,EAAC;UACvC,IAAI,CAACC,iBAAiB,EAAE;;MAE5B,CAAC;MACDC,KAAK,EAAGC,CAAC,IAAI;QACX,IAAI,CAACF,iBAAiB,EAAE;MAC1B;KACD,CAAC,CACH;EACH;EAEAA,iBAAiBA,CAAA;IACfb,eAAe,GAAGA,eAAe,GAAG,CAAC;IACrC,IAAGA,eAAe,KAAK,CAAC,EACxB,IAAI,CAACG,cAAc,CAACa,WAAW,EAAE;EACnC;;;mBA1BWf,kBAAkB,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA;AAAA;;SAAlBnB,kBAAkB;EAAAoB,OAAA,EAAlBpB,kBAAkB,CAAAqB;AAAA;SAAlBrB,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}